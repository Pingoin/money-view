syntax = "proto3";

package money_view;

enum text_type {
    TEXTTYPE_VRBANK = 0;
}

message Empty{}

message TextRequest{
    text_type type = 1;
    string data = 2;
    string account_ID = 3;
    bool compressed = 4;
}

// Represents an individual line item of a transaction (e.g., a specific product or service)
message LineItem {
    string description = 1; // Description of the line item (e.g., "Milk")
    float amount = 2; // Amount for the line item
    string tag_id = 3; // Category for the line item (e.g., "Groceries")
  }

// Represents a main transaction as it appears on a bank statement
message Transaction {
    string id = 1; // Unique identifier for the transaction
    string accountId = 3; // ID of the bank account where the transaction occurred
    int64 date = 4; // Date of the transaction (e.g., "2024-09-04")
    float totalAmount = 5; // Total amount of the transaction
    string partnerName = 7; // Name of the transaction partner
    repeated LineItem lineItems = 8; // List of line items within the transaction
    string description = 9; // Description or memo of the transaction
    float balanceAfterTransaction = 10; // Account balance after the transaction
  }

// Represents a transaction partner (e.g., a store or vendor)
message TransactionPartner {
    string name = 1; // Name of the transaction partner (e.g., "Supermarket XY")
  }

message TransactionResponse{
    repeated Transaction transactions = 1;
}

message TransactionPartnerResponse{
   repeated TransactionPartner transactionPartners = 1;
}

message BalanceInformation{
  string name = 1;
  float balance = 2;
  uint32 transactionCount =3 ; 
}

message BalanceResponse{
   repeated BalanceInformation expenses= 1;
   float totalExpenses = 2;
   repeated BalanceInformation income=3;
   float totalIncome = 4;
}

message Tag{
  string id=1;
  string name = 2;
  repeated string key_words= 3;
}

message TagResponse{
   repeated Tag tags = 1;
}

service MoneyView{
    rpc SendTextData(TextRequest) returns (TransactionResponse);
    rpc GetAllTransactions(Empty) returns (TransactionResponse);
    rpc GetAllTransactionPartners(Empty) returns (TransactionPartnerResponse);
    rpc GetPartnerBalance(Empty) returns (BalanceResponse);
    rpc GetTagBalance(Empty) returns (BalanceResponse);
    rpc GetTags(Empty) returns (TagResponse);
    rpc SetTag(Tag) returns(Empty);
}