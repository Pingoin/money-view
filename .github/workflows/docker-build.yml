name: Build Protobufs, Flutter Web, and Rust Binaries

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  # Schritt für das Generieren der Proto-Files und Flutter-Web-Anwendung
  build_protos_flutter:
    runs-on: ubuntu-latest
    outputs:
      proto_dir: ${{ steps.protos.outputs.proto_dir }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: 3.24.0

      - name: Install protoc and Dart plugin
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          dart pub global activate protoc_plugin

      - name: Compile Protobuf files for Dart (Flutter)
        run: |
          PROTO_DIR="proto"
          OUT_DIR="app/lib/generated"
          mkdir -p $OUT_DIR
          for proto_file in $PROTO_DIR/*.proto; do
            protoc -I=$PROTO_DIR --dart_out=grpc:$OUT_DIR $proto_file
          done

      - name: Build Flutter Web App
        run: |
          cd app
          flutter build web

      - name: Upload Flutter build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: flutter-web
          path: app/build/web/

      - name: Output Proto Directory
        id: protos
        run: echo "::set-output name=proto_dir::proto"

  # Schritt für das Generieren der Rust Protobuf-Dateien (nur einmal)
  build_rust_protos:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      # Install Rust toolchain
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install dependencies
        run: sudo apt-get install -y build-essential pkg-config libssl-dev protobuf-compiler

      - name: Compile Protobuf files for Rust
        run: cargo run --bin compile_protos

      - name: Upload Rust Protobuf artifacts
        uses: actions/upload-artifact@v3
        with:
          name: rust-protos
          path: src/generated/  # Verzeichnis mit generierten Protobuf-Dateien

  # Kompiliert Rust in zwei verschiedenen Architekturen, verwendet die generierten Protobuf-Dateien
  build_rust_x86_64:
    runs-on: ubuntu-latest
    needs: build_rust_protos
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download Rust Protobuf files
        uses: actions/download-artifact@v3
        with:
          name: rust-protos
          path: ./src/generated/ 
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Build Rust Binary
        run: |
          cargo build --release
      - name: Upload Rust binary artifacts
        uses: actions/upload-artifact@v3
        with:
          name: rust-binary-x86-64
          path: target/release/money-view
  build_rust_aarch64:
    runs-on: ubuntu-latest
    name: Build on ubuntu-22.04 armv7
    needs: build_rust_protos
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download Rust Protobuf files
        uses: actions/download-artifact@v3
        with:
          name: rust-protos
          path: ./src/generated/
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Rust arm64 toolchain
        run: rustup target add aarch64-unknown-linux-gnu
      - name: Install arm64 Linker
        run: sudo apt-get install gcc-arm-linux-gnueabihf
      - name: Build Rust Binary
        run: |
          cargo build --release --target=aarch64-unknown-linux-gnu
      - name: Upload Rust binary artifacts
        uses: actions/upload-artifact@v3
        with:
          name: rust-binary-arm64
          path: target/aarch64-unknown-linux-gnu/release/money-view

  # Schritt zum Erstellen des Dockerimages
  docker_build:
    runs-on: ubuntu-latest
    needs: [build_rust_x86_64, build_protos_flutter, build_rust_aarch64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Download Rust binaries
        uses: actions/download-artifact@v3
        with:
          name: x86_64-unknown-linux-gnu
          path: ./bin/amd64

      - name: Download Rust binaries
        uses: actions/download-artifact@v3
        with:
          name: aarch64-unknown-linux-gnu
          path: ./bin/arm64
  
      - name: Download Flutter Web artifacts
        uses: actions/download-artifact@v3
        with:
          name: flutter-web
          path: ./web

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:latest
