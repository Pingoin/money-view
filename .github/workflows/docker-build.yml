name: Build Protobufs, Flutter Web, and Rust Binaries

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  # Schritt f√ºr das Generieren der Proto-Files und Flutter-Web-Anwendung
  build_protos_flutter:
    runs-on: ubuntu-latest
    outputs:
      proto_dir: ${{ steps.protos.outputs.proto_dir }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install protoc and Dart plugin
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
          dart pub global activate protoc_plugin

      - name: Compile Protobuf files for Dart (Flutter)
        run: |
          PROTO_DIR="proto"
          OUT_DIR="app/lib/generated"
          mkdir -p $OUT_DIR
          for proto_file in $PROTO_DIR/*.proto; do
            protoc -I=$PROTO_DIR --dart_out=grpc:$OUT_DIR $proto_file
          done
          
      - name: Build Flutter Web App
        run: |
          cd app
          flutter build web

      - name: Upload Flutter build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: flutter-web
          path: app/build/web/

      - name: Output Proto Directory
        id: protos
        run: echo "::set-output name=proto_dir::proto"

  # Kompiliert Rust in zwei verschiedenen Architekturen
  build_rust:
    runs-on: ubuntu-latest
    needs: build_protos_flutter
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: sudo apt-get install -y build-essential pkg-config libssl-dev

      - name: Compile Protobuf files for Rust
        run: cargo run --bin compile_protos

      - name: Build Rust Binary
        run: |
          cargo build --release --target ${{ matrix.platform }}

      - name: Upload Rust binary artifacts
        uses: actions/upload-artifact@v3
        with:
          name: rust-binary-${{ matrix.platform }}
          path: target/${{ matrix.platform }}/release/

  # Schritt zum Erstellen des Dockerimages
  docker_build:
    runs-on: ubuntu-latest
    needs: build_rust
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Rust binaries
        uses: actions/download-artifact@v3
        with:
          name: rust-binary-linux/amd64
          path: ./bin/linux-amd64

      - name: Download Flutter Web artifacts
        uses: actions/download-artifact@v3
        with:
          name: flutter-web
          path: ./web

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/money_view:latest
